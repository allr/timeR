TODO: Merge into README.md

R function timers
-----------------
By default, timeR attaches a timer to each R function that is
defined. timeR tries to detect the name of the variable the function
is assigned to and uses that in conjunction with the file it was read
from as the name of the timer, e.g. "foo.R:bar". If timeR cannot
detect the variable name, it creates a special name that gives the
file name, line and column of the function definition,
e.g. "foo.R:<anon function defined in line 394 column 28>".
This can for example happen when the function is defined while passing
it as an argument to another function like "tryCatch(expr, error =
function (e) { ... })".

To find the corresponding source code for a function listed as
"anonymous" by timeR you may need to be a bit creative: If the code
comes from a package, it is usually installed from a temporary
directory (somewhere below /tmp on Unix) which is deleted after
installation. Libraries included with the R interpreter show a path
pointing to the directory where R is compiled like
/some/where/R-3.0.1/library/<name>/R/<name>, but the actual source
that the line number corresponds to is located in
"/some/where/R-3.0.1/src/library/<name>/all.R". This discrepancy is
caused by the way the R interpreter creates source references
internally and might be fixed in the future.

For autoload libraries, the timer name is generated when the autoload
library is generated, not when it is loaded. If the library was
generated in an R interpreter without timeR, all functions loaded from
it will be named "(deserialized)" because timeR is unable to generate
a better name at this time.

It is also possible that timeR encounters a function that is
completely missing debug information. Currently timeR does not attempt
to correct this as it has no way to create a meaningful and
"repeatable" name for such a function in its output. Instead it
accumulates the data for all such functions in the special timer
called "UserFuncFallback". This case may appear if a function is
deserialized from a data file created by an R interpreter without
timeR support.

There is an additional entry in the timeR output called "UserFunctionSum"
that provides the sum of the times and start count of all user
functions. This sum is sometimes convenient for analysis purposes.


External function timers
------------------------
FIXME: Convert to verbose description
- disabled by default
- enable with --enable-timeR-external configure switch
- attaches a timer to each externally called function
- listed in output as "<ExternalCode>:functionname"
- basically invalidates selftime of dotC/dotFortran/dotCall/dotCode
  (if they are enabled)
- not included in UserFunctionSum


Function table timers
---------------------
timeR can attach a timer to each entry in the table of internal and
primitive functions (see src/base/names.c in the R interpreter source
code). In the output file these are listed as "<.Primitive>:name" or
"<.Internal>:name" depending on their type.

There are two additional entries "SpecialSum" and "BuiltinSum"
available in the timeR output that provide the sum of the times and
start counts of the function table timers. The "SpecialSum" entry
provides the sum for all function table entries marked as SPECIALSXP,
the "BuiltinSum" entry provides the same for all entries marked as
BUILTINSXP. Please check the R internals documentation and/or R source
code for more details about their differences. The two sum entries are
intended to simplify analysis to avoid manual summation of many
entries when only a subset of function table timers is considered
interesting.

Some of the function table timers are effectively overridden by some
of the statically defined timers as described below. In these cases,
the self-time of the affected function table timers effectively only
measures some timing overhead plus the call to the C function
implementation.


Statically defined timers
-------------------------
Statically defined timers are timers that are manually placed in the
code of the interpreter in order to measure the execution time of
specific code blocks. Their scope varies from a subset of a function
to a set of multiple functions. Because of their close relation to
specific places within the interpreter source code, the following list
groups them by the source code file they are triggered in. Some of the
timers measure functions that are also listed as C function in
the R function table, so the self time of their corresponding function
table timer only shows the small dispatching overhead and not the full
calculation time if both function table timers and statically defined
timers are enabled.

(TODO: Document --with-timeR-static-list option of configure which
       can enable/disable each of these separately)

### memory.c ###

-   cons

    This timer tracks the runtime of the cons() C function. It is used
    to allocate a single cons cell which is a single element of a
    pairlist (e.g. LISTSXP).

.   allocVector

    This timer tracks the runtime of the allocVector() C function. It
    is the basic memory allocation function in the R interpreter for
    vector data types.

-   allocList

    This timer tracks the runtime of the allocList() C function. It
    constructs a pairlist by repeatedly calling cons(), so the self
    time of this function is relatively small as most of the time
    is spent in cons().

-   allocS4

    This timer tracks the runtime of the allocS4Object() C
    function. It is used to allocate a single cons cell of type S4SXP
    which is then marked as an S4 object.

-   GCInternal

    This timer tracks the runtime of the R_gc_internal() C function.
    It is the main function of the garbage collection, so this timer
    will calculate the time spent collecting unused variables.

### arith.c ###

-   doArith

    This timer tracks the runtime of the do_arith() C function. This
    function handles many of the binary arithmetic operators used in
    R, specifically "+", "-", "*", "/", "^", "%%" and "%/%". This
    timer has a function table timer equivalent for each of the
    operators. If a separate measurement of these operators is
    desired, the doArith timer should be disabled and the
    corresponding function table timers should be used instead.


### array.c ###

-   doMatprod

    This timer tracks the runtime of the do_matprod() C function. This
    function handles the operator "%*%" as well as the internals
    "crossprod" and "tcrossprod". This timer has a function table
    timer equivalent for each of these.

### connections.c ###

-   gzFile

    This timer tracks the runtime of multiple functions that allow
    access to gzip-compressed files as R connections.

-   bzFile

    This timer tracks the runtime of multiple functions that allow
    access to bzip2-compressed files as R connections.

-   xzFile

    This timer tracks the runtime of multiple functions that allow
    access to xz-compressed files as R connections.

### context.c ###

-   onExits

    This timer tracks the runtime of the R_run_onexits C
    function. This function is used when the R interpreter needs to
    remove multiple entries from its context stack, e.g. when exiting
    the interpreter or if an error occurs (which may not be fatal).

### dotcode.c ###

The timers in dotcode.c all exist in two versions, one with the
suffix "Full" and one without. The version with "Full" measures the
entire time needed for the external function call, including parameter
validation and processing, the version without the suffix measures
just the time needed for the external function call. Since the two
versions are nested, the self-time of the "Full" version corresponds
to just the time needed for parameter valildation and processing.

If external function timers are enabled, the self-time of the
non-"Full" timers becomes meaningless as the external function timer
is started immediately after the by-call-method timer is started.

-   dotExternalFull / dotExternal

    These two timers measure the time of external code called using
    the ".External" function.

-   dotCallFull / dotCall

    These two timers measure the time of external code called using
    the ".Call" function.

-   dotCFull / dotC

    These two timers measure the time of external code called using
    the ".C" function.

-   dotFortranFull / dotFortran

    These two timers measure the time of external code called using
    the ".Fortran" function.


### dounzip.c ###

-   doUnzip

    This timer measures the time spent in the Runzip function, which
    is called when the R function "unzip" is used with the unzip
    parameter set to "internal".

-   zipRead

    The zipRead timer measures two C-level functions that are used
    when data is read from connections created with "unz".


### duplicate.c ###

-   Duplicate

    This timer measures the time spent in the duplicate() C function
    which is often (*) used by the R interpreter to create a copy of a
    piece of data in memory.

    (*) but not always, for example dotcode.c has code paths that 
    generate a copy of function parameters "manually" instead of using
    duplicate


### envir.c ###

-   SymLookup

    The SymLookup timer measures the time spent in multiple C
    functions which look up symbols in the current chain of
    environments. Multiple functions are accumulated in this timer
    because they perform very similar jobs with minor additional
    conditions, e.g. one of them looks for symbols of a specific
    type.

-   SymLookupEval

    Some of the symbol lookup functions force all promises that they
    encounter. The time needed to do so is measured in SymLookupEval,
    which is a timer nested within SymLookup.

-   FunLookup

    The FunLookup timer measures the time spent in the findFun() C
    function which is used to locate a function in the current chain
    of environments given its name. Part of the time of the function
    lookup is measured in the nested timer FunLookupEval.

-   FunLookupEval

    During function lookup (timed in FunLookup), the findFun function
    forces all promises that it finds. The time needed to do so is
    measured in FunLookupEval, which is a timer nested within
    FunLookup.

-   findVarInFrame3other

    The R interpreter has another function for looking up symbols in
    environments called findVarInFrame3. Unlike the functions timed in
    FunLookup and SymLookup it only searches in the single environment
    which is passed to it. Calls to it occur less often than to the
    other two lookup types, but for completeness it was also
    instrumented with a dedicated timer.


### eval.c ###

-   Match

    The Match timer measures the time needed to match the arguments
    passed in a function call to the list of formal parameters given
    in the function declaration.

-   evalList

    The evalList timer measures the time spent in the function of the
    same name. 


### internet.c ###

-   Download

    The download timer measures the time spent in the Rdownload C
    function which is used when the _download.file_ R function is
    called. The time accumulated on this timer can be used to factor
    out download times from the total runtime of an R program.


### logic.c ###

-   doLogic

    The doLogic timer measures the time spent in the R functions "&",
    "|" and "!". If a separate measurement of these three functions is
    desired, the doLogic timer should be disabled and the
    corresponding function table timers should be used instead.

-   doLogic2

    The doLogic2 timer measures the time spent in the R functions "&&"
    and "||". If a separate measurement of these two functions is
    desired, the doLogic timer should be disabled and the
    corresponding function table timers should be used instead.

-   doLogic3

    The doLogic3 timer measures the time spent in the R functions _all_
    and _any_. If a separate measurement of these two functions is
    desired, the doLogic timer should be disabled and the
    corresponding function table timers should be used instead.


### main.c ###

-   Repl

    The Repl timer measures the time spent in R's main interpreter
    loop whose name is an abbreviation for Read-eval-print-loop. If an
    interactive session is timed, the idle time R spends waiting for
    user input is accumulated on this timer.

-   SetupMainLoop

    This timer measures the time needed for initializing the R
    interpreter, starting in the part of the code that is shared
    between all of the frontends and ports. A small part of the
    initialization (e.g. command line parsing) is not covered by this
    timer but is included with the Startup timer (see
    below). SetupMainLoop is a nested timer within Startup.

-   endMainloop

    This timer measures the time needed for deinitializing the R
    interpreter. It starts when the Repl loop exits and covers the
    runtime up to the point where timeR writes its output file.


### names.c ###

-   Install

    The Install timer measures the time needed to look up and insert
    values into R's global symbol table. 

-   dotSpecial2
    (TODO: This timer should be renamed)
    This timer measures the time spent handling .Internal calls. If
    function table timers are enabled, a timer for the called function
    is nested inside this timer and the self time of dotSpecial2 then
    corresponds to the time needed for pre- and postprocessing the
    function call.


### relop.c ###

-   doRelop

    The doRelop timer measures the time spent in the relational
    operator functions of R (==, !=, <, <=, >=). If a seperate
    measurement of these six functions is desired, the doRelop timer
    should be disabled and the corresponding function table timers
    should be used instead.


### subset.c ###

-   doSubset

    The doSubset timer measures the time spent in the "[" subsetting
    operator and the .subset primitive. The "[" operator has a small
    untimed part that checks if the call needs to be dispatched to a
    method instead of the default implementation. Both functions can
    be measured separately if desired by disabling the doSubset timer
    and using the corresponding function table timers instead.

-   doSubset2

    The doSubset2 timer measures the time spent in the "[[" subsetting
    operator and the .subset2 primitive. The "[[" operator has a small
    untimed part that checks if the call needs to be dispatched to a
    method instead of the default implementation. Both functions can
    be measured separately if desired by disabling the doSubset2 timer
    and using the corresponding function table timers instead.

-   doSubset3

    The doSubset3 timer measures the time spent in the R_subset3_dflt
    C function which is used for the "$" subsetting operator in R. In
    byte-compiled R code, the function is called directly while in
    interpreted R code an additional part outside of this timer exists
    which checks if the arguments are valid and if the call needs to
    be dispatched to a method instead of the default
    implementation. The time needed for these checks can be found in
    the function table timer "<.Primitive>:$".


### Rsock.c ###

-   Rsock

    The Rsock timer measures the time spent in various socket
    operations invoked from an R program (e.g. utils::read.socket,
    utils::write.socket and related functions).


### sys-std.c ###

-   Sleep

    This timer measures the time spent sleeping via the "sys.sleep"
    function.


### sys-unix.c ###

-   System

    This timer measures the time spent running external programs using
    the "system" R function.


### other special timers ###

-   Startup

    The startup timer measures the total time spent in interpreter
    startup from a very early point to the start of the Repl loop. The
    SetupMainLoop timer is nested within this timer, only small parts
    are covered by Startup and nothing else, for example the parsing
    of the command line options of the R interpreter.

-   TotalRuntime

    The TotalRuntime field measures the total runtime of the R
    interpreter from the very start of the interpreter to the point
    where timeR writes its output file. Although you could generate
    the same value (modulo rounding errors) by adding up the self time
    of all timers, this single field is more convenient to use if you
    want to calculate values relative to the total runtime.
