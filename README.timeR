Compilation notes:
- Use --enable-timeR to enable when running configure
- Use --with-timeR-clock=[posix|rdtsc|rdtscp] to select the
  clock source used, default is posix. Be aware of the
  limitations of rdtsc/rdtscp, Wikipedia mentions a few:
  https://en.wikipedia.org/wiki/Time_Stamp_Counter

Usage:
  R --timeR-file foo.txt <other parameters>

The output is a few informational lines in "keyword<whitespace>value"
format followed by a single comment line starting with #, after
which the timers are dumped in tab-delimited format. The colums
are the timer name, the time accumulated on this timer (excluding
child timers), the total time accumulated on this timer
(including child timers), the number of times this timer was started,
the number of times this timer was stopped implicitly and
a 0/1 indicator that is 1 if at least one execution of the function
used a byte-compiled version or 0 if it was always interpreted.

To suppress timers in the output that were never triggered
(number of starts 0), add --timeR-quiet to the command line
options for R.

Design goals:
- mostly compatible with old timeR
- introduces no failures in R selftests ("make check")
- no new #ifdefs in R code
- capable of measuring its own overhead where required
- simple way of adding additional timers
- compile-time selection of time measurement method
- resistant against any possible control flow in R,
  flow through specific functions to "unwind" the
  timer stack in case of longjmp or similar is not
  required


Possible future design issues:
- not thread-safe

Currently unreached design goals:
- "make check" fails due to additional field in srcrefs
  -> programs can detect if profiled or not
  -> alternative implementation using a lang5 instead of lang4
     in xxdefun had a similar problem
  -> ignored for now, mostly an aesthetics issue

Partially reached design goals:
- adding new timers not simple enough,
  requires modification in three places
  (timeR.h, timeR.c, measurement location)
  -> reduction to 2 maybe possible with preprocessor hacks,
     reduction to 1 probably not with standard C
- start/end positions of some timers have moved slightly
  compared to timeR
- time accounting in case of errors differs from old timeR
  (partial function execution and error path are added
   to the functions's timer now, was the caller's timer before)

Would be useful, but can live without:
- comments explaining mptr->measurement->bin hierarchy

Wishlist items:
- bin IDs stay attached at serialisation (not critical, just inelegant)
- wrapping of every SETJMP is extremely ugly, can't handle by wrapping
  in a function though (would return to invalid stack frame)
- remove duplicate entries for user function timers
  - workaround: merge-timeR.pl script in root directory sums duplicates

Possible future extensions:
- check if a reasonable file name can be generated when source() is used
